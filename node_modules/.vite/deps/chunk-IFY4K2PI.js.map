{
  "version": 3,
  "sources": ["../../ccxt/js/src/static_dependencies/proxies/agent-base/index.js", "../../ccxt/js/src/static_dependencies/proxies/agent-base/helpers.js"],
  "sourcesContent": ["// ----------------------------------------------------------------------------\n\n// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:\n// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code\n// EDIT THE CORRESPONDENT .ts FILE INSTEAD\n\nimport * as http from 'http';\nexport * from './helpers.js';\nfunction isSecureEndpoint() {\n    const { stack } = new Error();\n    if (typeof stack !== 'string')\n        return false;\n    return stack\n        .split('\\n')\n        .some((l) => l.indexOf('(https.js:') !== -1 ||\n        l.indexOf('node:https:') !== -1);\n}\nconst INTERNAL = Symbol('AgentBaseInternalState');\nexport class Agent extends http.Agent {\n    constructor(opts) {\n        super(opts);\n        this[INTERNAL] = {};\n    }\n    createSocket(req, options, cb) {\n        // Need to determine whether this is an `http` or `https` request.\n        // First check the `secureEndpoint` property explicitly, since this\n        // means that a parent `Agent` is \"passing through\" to this instance.\n        let secureEndpoint = typeof options.secureEndpoint === 'boolean'\n            ? options.secureEndpoint\n            : undefined;\n        // If no explicit `secure` endpoint, check if `protocol` property is\n        // set. This will usually be the case since using a full string URL\n        // or `URL` instance should be the most common case.\n        if (typeof secureEndpoint === 'undefined' &&\n            typeof options.protocol === 'string') {\n            secureEndpoint = options.protocol === 'https:';\n        }\n        // Finally, if no `protocol` property was set, then fall back to\n        // checking the stack trace of the current call stack, and try to\n        // detect the \"https\" module.\n        if (typeof secureEndpoint === 'undefined') {\n            secureEndpoint = isSecureEndpoint();\n        }\n        const connectOpts = { ...options, secureEndpoint };\n        Promise.resolve()\n            .then(() => this.connect(req, connectOpts))\n            .then((socket) => {\n            if (socket instanceof http.Agent) {\n                // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n                return socket.addRequest(req, connectOpts);\n            }\n            this[INTERNAL].currentSocket = socket;\n            // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n            super.createSocket(req, options, cb);\n        }, cb);\n    }\n    createConnection() {\n        const socket = this[INTERNAL].currentSocket;\n        this[INTERNAL].currentSocket = undefined;\n        if (!socket) {\n            throw new Error('No socket was returned in the `connect()` function');\n        }\n        return socket;\n    }\n    get defaultPort() {\n        return (this[INTERNAL].defaultPort ??\n            (this.protocol === 'https:' ? 443 : 80));\n    }\n    set defaultPort(v) {\n        if (this[INTERNAL]) {\n            this[INTERNAL].defaultPort = v;\n        }\n    }\n    get protocol() {\n        return (this[INTERNAL].protocol ?? (isSecureEndpoint() ? 'https:' : 'http:'));\n    }\n    set protocol(v) {\n        if (this[INTERNAL]) {\n            this[INTERNAL].protocol = v;\n        }\n    }\n}\n", "// ----------------------------------------------------------------------------\n\n// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:\n// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code\n// EDIT THE CORRESPONDENT .ts FILE INSTEAD\n\nimport * as http from 'http';\nimport * as https from 'https';\nexport async function toBuffer(stream) {\n    let length = 0;\n    const chunks = [];\n    for await (const chunk of stream) {\n        length += chunk.length;\n        chunks.push(chunk);\n    }\n    return Buffer.concat(chunks, length);\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function json(stream) {\n    const buf = await toBuffer(stream);\n    const str = buf.toString('utf8');\n    try {\n        return JSON.parse(str);\n    }\n    catch (_err) {\n        const err = _err;\n        err.message += ` (input: ${str})`;\n        throw err;\n    }\n}\nexport function req(url, opts = {}) {\n    const href = typeof url === 'string' ? url : url.href;\n    const req = (href.startsWith('https:') ? https : http).request(url, opts);\n    const promise = new Promise((resolve, reject) => {\n        req\n            .once('response', resolve)\n            .once('error', reject)\n            .end();\n    });\n    req.then = promise.then.bind(promise);\n    return req;\n}\n"],
  "mappings": ";;;;;;;;;AAMA,IAAAA,QAAsB;;;ACAtB,WAAsB;AACtB,YAAuB;;;ADCvB,SAAS,mBAAmB;AACxB,QAAM,EAAE,MAAM,IAAI,IAAI,MAAM;AAC5B,MAAI,OAAO,UAAU;AACjB,WAAO;AACX,SAAO,MACF,MAAM,IAAI,EACV,KAAK,CAAC,MAAM,EAAE,QAAQ,YAAY,MAAM,MACzC,EAAE,QAAQ,aAAa,MAAM,EAAE;AACvC;AACA,IAAM,WAAW,OAAO,wBAAwB;AACzC,IAAMC,SAAN,cAAyB,YAAM;AAAA,EAClC,YAAY,MAAM;AACd,UAAM,IAAI;AACV,SAAK,QAAQ,IAAI,CAAC;AAAA,EACtB;AAAA,EACA,aAAa,KAAK,SAAS,IAAI;AAI3B,QAAI,iBAAiB,OAAO,QAAQ,mBAAmB,YACjD,QAAQ,iBACR;AAIN,QAAI,OAAO,mBAAmB,eAC1B,OAAO,QAAQ,aAAa,UAAU;AACtC,uBAAiB,QAAQ,aAAa;AAAA,IAC1C;AAIA,QAAI,OAAO,mBAAmB,aAAa;AACvC,uBAAiB,iBAAiB;AAAA,IACtC;AACA,UAAM,cAAc,EAAE,GAAG,SAAS,eAAe;AACjD,YAAQ,QAAQ,EACX,KAAK,MAAM,KAAK,QAAQ,KAAK,WAAW,CAAC,EACzC,KAAK,CAAC,WAAW;AAClB,UAAI,kBAAuB,aAAO;AAE9B,eAAO,OAAO,WAAW,KAAK,WAAW;AAAA,MAC7C;AACA,WAAK,QAAQ,EAAE,gBAAgB;AAE/B,YAAM,aAAa,KAAK,SAAS,EAAE;AAAA,IACvC,GAAG,EAAE;AAAA,EACT;AAAA,EACA,mBAAmB;AACf,UAAM,SAAS,KAAK,QAAQ,EAAE;AAC9B,SAAK,QAAQ,EAAE,gBAAgB;AAC/B,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACxE;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc;AACd,WAAQ,KAAK,QAAQ,EAAE,gBAClB,KAAK,aAAa,WAAW,MAAM;AAAA,EAC5C;AAAA,EACA,IAAI,YAAY,GAAG;AACf,QAAI,KAAK,QAAQ,GAAG;AAChB,WAAK,QAAQ,EAAE,cAAc;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAQ,KAAK,QAAQ,EAAE,aAAa,iBAAiB,IAAI,WAAW;AAAA,EACxE;AAAA,EACA,IAAI,SAAS,GAAG;AACZ,QAAI,KAAK,QAAQ,GAAG;AAChB,WAAK,QAAQ,EAAE,WAAW;AAAA,IAC9B;AAAA,EACJ;AACJ;",
  "names": ["http", "Agent"]
}
