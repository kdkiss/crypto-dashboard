import {
  require_http,
  require_https
} from "./chunk-L5GNONGA.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/ccxt/js/src/static_dependencies/proxies/agent-base/index.js
var http2 = __toESM(require_http(), 1);

// node_modules/ccxt/js/src/static_dependencies/proxies/agent-base/helpers.js
var http = __toESM(require_http(), 1);
var https = __toESM(require_https(), 1);

// node_modules/ccxt/js/src/static_dependencies/proxies/agent-base/index.js
function isSecureEndpoint() {
  const { stack } = new Error();
  if (typeof stack !== "string")
    return false;
  return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
}
var INTERNAL = Symbol("AgentBaseInternalState");
var Agent2 = class extends http2.Agent {
  constructor(opts) {
    super(opts);
    this[INTERNAL] = {};
  }
  createSocket(req, options, cb) {
    let secureEndpoint = typeof options.secureEndpoint === "boolean" ? options.secureEndpoint : void 0;
    if (typeof secureEndpoint === "undefined" && typeof options.protocol === "string") {
      secureEndpoint = options.protocol === "https:";
    }
    if (typeof secureEndpoint === "undefined") {
      secureEndpoint = isSecureEndpoint();
    }
    const connectOpts = { ...options, secureEndpoint };
    Promise.resolve().then(() => this.connect(req, connectOpts)).then((socket) => {
      if (socket instanceof http2.Agent) {
        return socket.addRequest(req, connectOpts);
      }
      this[INTERNAL].currentSocket = socket;
      super.createSocket(req, options, cb);
    }, cb);
  }
  createConnection() {
    const socket = this[INTERNAL].currentSocket;
    this[INTERNAL].currentSocket = void 0;
    if (!socket) {
      throw new Error("No socket was returned in the `connect()` function");
    }
    return socket;
  }
  get defaultPort() {
    return this[INTERNAL].defaultPort ?? (this.protocol === "https:" ? 443 : 80);
  }
  set defaultPort(v) {
    if (this[INTERNAL]) {
      this[INTERNAL].defaultPort = v;
    }
  }
  get protocol() {
    return this[INTERNAL].protocol ?? (isSecureEndpoint() ? "https:" : "http:");
  }
  set protocol(v) {
    if (this[INTERNAL]) {
      this[INTERNAL].protocol = v;
    }
  }
};

export {
  Agent2 as Agent
};
//# sourceMappingURL=chunk-IFY4K2PI.js.map
